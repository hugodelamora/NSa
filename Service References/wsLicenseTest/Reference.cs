//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NominasSAT.wsLicenseTest {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Service", Namespace="http://schemas.datacontract.org/2004/07/Licensing")]
    [System.SerializableAttribute()]
    public partial class Service : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ActivationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DaysToActivateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<NominasSAT.wsLicenseTest.Feature> FeatureListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InactiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ServiceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UnlimitedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ActivationDate {
            get {
                return this.ActivationDateField;
            }
            set {
                if ((this.ActivationDateField.Equals(value) != true)) {
                    this.ActivationDateField = value;
                    this.RaisePropertyChanged("ActivationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DaysToActivate {
            get {
                return this.DaysToActivateField;
            }
            set {
                if ((this.DaysToActivateField.Equals(value) != true)) {
                    this.DaysToActivateField = value;
                    this.RaisePropertyChanged("DaysToActivate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<NominasSAT.wsLicenseTest.Feature> FeatureList {
            get {
                return this.FeatureListField;
            }
            set {
                if ((object.ReferenceEquals(this.FeatureListField, value) != true)) {
                    this.FeatureListField = value;
                    this.RaisePropertyChanged("FeatureList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Inactive {
            get {
                return this.InactiveField;
            }
            set {
                if ((this.InactiveField.Equals(value) != true)) {
                    this.InactiveField = value;
                    this.RaisePropertyChanged("Inactive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ServiceID {
            get {
                return this.ServiceIDField;
            }
            set {
                if ((this.ServiceIDField.Equals(value) != true)) {
                    this.ServiceIDField = value;
                    this.RaisePropertyChanged("ServiceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceName {
            get {
                return this.ServiceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceNameField, value) != true)) {
                    this.ServiceNameField = value;
                    this.RaisePropertyChanged("ServiceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Unlimited {
            get {
                return this.UnlimitedField;
            }
            set {
                if ((this.UnlimitedField.Equals(value) != true)) {
                    this.UnlimitedField = value;
                    this.RaisePropertyChanged("Unlimited");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Feature", Namespace="http://schemas.datacontract.org/2004/07/Licensing")]
    [System.SerializableAttribute()]
    public partial class Feature : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float BalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<string> IdentifiersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InactiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UnlimitedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Balance {
            get {
                return this.BalanceField;
            }
            set {
                if ((this.BalanceField.Equals(value) != true)) {
                    this.BalanceField = value;
                    this.RaisePropertyChanged("Balance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> Identifiers {
            get {
                return this.IdentifiersField;
            }
            set {
                if ((object.ReferenceEquals(this.IdentifiersField, value) != true)) {
                    this.IdentifiersField = value;
                    this.RaisePropertyChanged("Identifiers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Inactive {
            get {
                return this.InactiveField;
            }
            set {
                if ((this.InactiveField.Equals(value) != true)) {
                    this.InactiveField = value;
                    this.RaisePropertyChanged("Inactive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Unlimited {
            get {
                return this.UnlimitedField;
            }
            set {
                if ((this.UnlimitedField.Equals(value) != true)) {
                    this.UnlimitedField = value;
                    this.RaisePropertyChanged("Unlimited");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicensingResult", Namespace="http://schemas.datacontract.org/2004/07/Licensing")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(NominasSAT.wsLicenseTest.ValidateResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(NominasSAT.wsLicenseTest.ConsumeHistoryResult))]
    public partial class LicensingResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LicenseIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NominasSAT.wsLicenseTest.Result ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LicenseID {
            get {
                return this.LicenseIDField;
            }
            set {
                if ((object.ReferenceEquals(this.LicenseIDField, value) != true)) {
                    this.LicenseIDField = value;
                    this.RaisePropertyChanged("LicenseID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NominasSAT.wsLicenseTest.Result Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Result", Namespace="http://schemas.datacontract.org/2004/07/Licensing")]
    [System.SerializableAttribute()]
    public partial class Result : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MessageIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ResultTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MessageID {
            get {
                return this.MessageIDField;
            }
            set {
                if ((this.MessageIDField.Equals(value) != true)) {
                    this.MessageIDField = value;
                    this.RaisePropertyChanged("MessageID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ResultType {
            get {
                return this.ResultTypeField;
            }
            set {
                if ((this.ResultTypeField.Equals(value) != true)) {
                    this.ResultTypeField = value;
                    this.RaisePropertyChanged("ResultType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValidateResult", Namespace="http://schemas.datacontract.org/2004/07/Licensing")]
    [System.SerializableAttribute()]
    public partial class ValidateResult : NominasSAT.wsLicenseTest.LicensingResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NominasSAT.wsLicenseTest.Service ServiceInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValidationCodeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NominasSAT.wsLicenseTest.Service ServiceInfo {
            get {
                return this.ServiceInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceInfoField, value) != true)) {
                    this.ServiceInfoField = value;
                    this.RaisePropertyChanged("ServiceInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ValidationCode {
            get {
                return this.ValidationCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ValidationCodeField, value) != true)) {
                    this.ValidationCodeField = value;
                    this.RaisePropertyChanged("ValidationCode");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConsumeHistoryResult", Namespace="http://schemas.datacontract.org/2004/07/Licensing")]
    [System.SerializableAttribute()]
    public partial class ConsumeHistoryResult : NominasSAT.wsLicenseTest.LicensingResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<NominasSAT.wsLicenseTest.Movement> MovementsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<NominasSAT.wsLicenseTest.Movement> Movements {
            get {
                return this.MovementsField;
            }
            set {
                if ((object.ReferenceEquals(this.MovementsField, value) != true)) {
                    this.MovementsField = value;
                    this.RaisePropertyChanged("Movements");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Movement", Namespace="http://schemas.datacontract.org/2004/07/Licensing.Entities")]
    [System.SerializableAttribute()]
    public partial class Movement : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReferenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TotalField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reference {
            get {
                return this.ReferenceField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferenceField, value) != true)) {
                    this.ReferenceField = value;
                    this.RaisePropertyChanged("Reference");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SerialBase", Namespace="http://schemas.datacontract.org/2004/07/Licensing")]
    [System.SerializableAttribute()]
    public partial class SerialBase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivationKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DigitalSignField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SerialNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SiteCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionTagField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivationKey {
            get {
                return this.ActivationKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivationKeyField, value) != true)) {
                    this.ActivationKeyField = value;
                    this.RaisePropertyChanged("ActivationKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DigitalSign {
            get {
                return this.DigitalSignField;
            }
            set {
                if ((object.ReferenceEquals(this.DigitalSignField, value) != true)) {
                    this.DigitalSignField = value;
                    this.RaisePropertyChanged("DigitalSign");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SerialNumber {
            get {
                return this.SerialNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.SerialNumberField, value) != true)) {
                    this.SerialNumberField = value;
                    this.RaisePropertyChanged("SerialNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SiteCode {
            get {
                return this.SiteCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.SiteCodeField, value) != true)) {
                    this.SiteCodeField = value;
                    this.RaisePropertyChanged("SiteCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VersionTag {
            get {
                return this.VersionTagField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionTagField, value) != true)) {
                    this.VersionTagField = value;
                    this.RaisePropertyChanged("VersionTag");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryLicenseResult", Namespace="http://schemas.datacontract.org/2004/07/Licensing")]
    [System.SerializableAttribute()]
    public partial class QueryLicenseResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NominasSAT.wsLicenseTest.License LicenseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NominasSAT.wsLicenseTest.Result ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NominasSAT.wsLicenseTest.License License {
            get {
                return this.LicenseField;
            }
            set {
                if ((object.ReferenceEquals(this.LicenseField, value) != true)) {
                    this.LicenseField = value;
                    this.RaisePropertyChanged("License");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NominasSAT.wsLicenseTest.Result Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="License", Namespace="http://schemas.datacontract.org/2004/07/Licensing")]
    [System.SerializableAttribute()]
    public partial class License : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ActivationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BlockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SerialNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<NominasSAT.wsLicenseTest.Service> ServiceListField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ActivationDate {
            get {
                return this.ActivationDateField;
            }
            set {
                if ((this.ActivationDateField.Equals(value) != true)) {
                    this.ActivationDateField = value;
                    this.RaisePropertyChanged("ActivationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Blocked {
            get {
                return this.BlockedField;
            }
            set {
                if ((this.BlockedField.Equals(value) != true)) {
                    this.BlockedField = value;
                    this.RaisePropertyChanged("Blocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SerialNumber {
            get {
                return this.SerialNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.SerialNumberField, value) != true)) {
                    this.SerialNumberField = value;
                    this.RaisePropertyChanged("SerialNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<NominasSAT.wsLicenseTest.Service> ServiceList {
            get {
                return this.ServiceListField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceListField, value) != true)) {
                    this.ServiceListField = value;
                    this.RaisePropertyChanged("ServiceList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="servicios.contpaqi.com", ConfigurationName="wsLicenseTest.ILicensingServices")]
    public interface ILicensingServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="servicios.contpaqi.com/ILicensingServices/CreateLicense", ReplyAction="servicios.contpaqi.com/ILicensingServices/CreateLicenseResponse")]
        NominasSAT.wsLicenseTest.LicensingResult CreateLicense(System.Collections.Generic.List<NominasSAT.wsLicenseTest.Service> Services);
        
        [System.ServiceModel.OperationContractAttribute(Action="servicios.contpaqi.com/ILicensingServices/CreateLicense", ReplyAction="servicios.contpaqi.com/ILicensingServices/CreateLicenseResponse")]
        System.Threading.Tasks.Task<NominasSAT.wsLicenseTest.LicensingResult> CreateLicenseAsync(System.Collections.Generic.List<NominasSAT.wsLicenseTest.Service> Services);
        
        [System.ServiceModel.OperationContractAttribute(Action="servicios.contpaqi.com/ILicensingServices/ValidateSerialService", ReplyAction="servicios.contpaqi.com/ILicensingServices/ValidateSerialServiceResponse")]
        NominasSAT.wsLicenseTest.ValidateResult ValidateSerialService(NominasSAT.wsLicenseTest.SerialBase serial, NominasSAT.wsLicenseTest.Service Service);
        
        [System.ServiceModel.OperationContractAttribute(Action="servicios.contpaqi.com/ILicensingServices/ValidateSerialService", ReplyAction="servicios.contpaqi.com/ILicensingServices/ValidateSerialServiceResponse")]
        System.Threading.Tasks.Task<NominasSAT.wsLicenseTest.ValidateResult> ValidateSerialServiceAsync(NominasSAT.wsLicenseTest.SerialBase serial, NominasSAT.wsLicenseTest.Service Service);
        
        [System.ServiceModel.OperationContractAttribute(Action="servicios.contpaqi.com/ILicensingServices/ValidateService", ReplyAction="servicios.contpaqi.com/ILicensingServices/ValidateServiceResponse")]
        NominasSAT.wsLicenseTest.ValidateResult ValidateService(string LicenseID, NominasSAT.wsLicenseTest.Service service);
        
        [System.ServiceModel.OperationContractAttribute(Action="servicios.contpaqi.com/ILicensingServices/ValidateService", ReplyAction="servicios.contpaqi.com/ILicensingServices/ValidateServiceResponse")]
        System.Threading.Tasks.Task<NominasSAT.wsLicenseTest.ValidateResult> ValidateServiceAsync(string LicenseID, NominasSAT.wsLicenseTest.Service service);
        
        [System.ServiceModel.OperationContractAttribute(Action="servicios.contpaqi.com/ILicensingServices/ActivateService", ReplyAction="servicios.contpaqi.com/ILicensingServices/ActivateServiceResponse")]
        NominasSAT.wsLicenseTest.LicensingResult ActivateService(string LicenseID, NominasSAT.wsLicenseTest.Service Service);
        
        [System.ServiceModel.OperationContractAttribute(Action="servicios.contpaqi.com/ILicensingServices/ActivateService", ReplyAction="servicios.contpaqi.com/ILicensingServices/ActivateServiceResponse")]
        System.Threading.Tasks.Task<NominasSAT.wsLicenseTest.LicensingResult> ActivateServiceAsync(string LicenseID, NominasSAT.wsLicenseTest.Service Service);
        
        [System.ServiceModel.OperationContractAttribute(Action="servicios.contpaqi.com/ILicensingServices/UpdateLicense", ReplyAction="servicios.contpaqi.com/ILicensingServices/UpdateLicenseResponse")]
        NominasSAT.wsLicenseTest.LicensingResult UpdateLicense(string LicenseID, System.Collections.Generic.List<NominasSAT.wsLicenseTest.Service> Services);
        
        [System.ServiceModel.OperationContractAttribute(Action="servicios.contpaqi.com/ILicensingServices/UpdateLicense", ReplyAction="servicios.contpaqi.com/ILicensingServices/UpdateLicenseResponse")]
        System.Threading.Tasks.Task<NominasSAT.wsLicenseTest.LicensingResult> UpdateLicenseAsync(string LicenseID, System.Collections.Generic.List<NominasSAT.wsLicenseTest.Service> Services);
        
        [System.ServiceModel.OperationContractAttribute(Action="servicios.contpaqi.com/ILicensingServices/GetLicenseInfo", ReplyAction="servicios.contpaqi.com/ILicensingServices/GetLicenseInfoResponse")]
        NominasSAT.wsLicenseTest.QueryLicenseResult GetLicenseInfo(string LicenseID, int ServiceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="servicios.contpaqi.com/ILicensingServices/GetLicenseInfo", ReplyAction="servicios.contpaqi.com/ILicensingServices/GetLicenseInfoResponse")]
        System.Threading.Tasks.Task<NominasSAT.wsLicenseTest.QueryLicenseResult> GetLicenseInfoAsync(string LicenseID, int ServiceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="servicios.contpaqi.com/ILicensingServices/Commit", ReplyAction="servicios.contpaqi.com/ILicensingServices/CommitResponse")]
        NominasSAT.wsLicenseTest.LicensingResult Commit(string LicenseID, string ValidationCode, string Reference);
        
        [System.ServiceModel.OperationContractAttribute(Action="servicios.contpaqi.com/ILicensingServices/Commit", ReplyAction="servicios.contpaqi.com/ILicensingServices/CommitResponse")]
        System.Threading.Tasks.Task<NominasSAT.wsLicenseTest.LicensingResult> CommitAsync(string LicenseID, string ValidationCode, string Reference);
        
        [System.ServiceModel.OperationContractAttribute(Action="servicios.contpaqi.com/ILicensingServices/GetPendingServices", ReplyAction="servicios.contpaqi.com/ILicensingServices/GetPendingServicesResponse")]
        NominasSAT.wsLicenseTest.QueryLicenseResult GetPendingServices(string LicenseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="servicios.contpaqi.com/ILicensingServices/GetPendingServices", ReplyAction="servicios.contpaqi.com/ILicensingServices/GetPendingServicesResponse")]
        System.Threading.Tasks.Task<NominasSAT.wsLicenseTest.QueryLicenseResult> GetPendingServicesAsync(string LicenseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="servicios.contpaqi.com/ILicensingServices/ConsumeHistory", ReplyAction="servicios.contpaqi.com/ILicensingServices/ConsumeHistoryResponse")]
        NominasSAT.wsLicenseTest.ConsumeHistoryResult ConsumeHistory(string LicenseID, int ServiceID, int FeatureID, System.DateTime StartDate, System.DateTime EndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="servicios.contpaqi.com/ILicensingServices/ConsumeHistory", ReplyAction="servicios.contpaqi.com/ILicensingServices/ConsumeHistoryResponse")]
        System.Threading.Tasks.Task<NominasSAT.wsLicenseTest.ConsumeHistoryResult> ConsumeHistoryAsync(string LicenseID, int ServiceID, int FeatureID, System.DateTime StartDate, System.DateTime EndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="servicios.contpaqi.com/ILicensingServices/BlockLicense", ReplyAction="servicios.contpaqi.com/ILicensingServices/BlockLicenseResponse")]
        NominasSAT.wsLicenseTest.LicensingResult BlockLicense(string licenseID, int serviceID, int Blocked);
        
        [System.ServiceModel.OperationContractAttribute(Action="servicios.contpaqi.com/ILicensingServices/BlockLicense", ReplyAction="servicios.contpaqi.com/ILicensingServices/BlockLicenseResponse")]
        System.Threading.Tasks.Task<NominasSAT.wsLicenseTest.LicensingResult> BlockLicenseAsync(string licenseID, int serviceID, int Blocked);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILicensingServicesChannel : NominasSAT.wsLicenseTest.ILicensingServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LicensingServicesClient : System.ServiceModel.ClientBase<NominasSAT.wsLicenseTest.ILicensingServices>, NominasSAT.wsLicenseTest.ILicensingServices {
        
        public LicensingServicesClient() {
        }
        
        public LicensingServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LicensingServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LicensingServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LicensingServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public NominasSAT.wsLicenseTest.LicensingResult CreateLicense(System.Collections.Generic.List<NominasSAT.wsLicenseTest.Service> Services) {
            return base.Channel.CreateLicense(Services);
        }
        
        public System.Threading.Tasks.Task<NominasSAT.wsLicenseTest.LicensingResult> CreateLicenseAsync(System.Collections.Generic.List<NominasSAT.wsLicenseTest.Service> Services) {
            return base.Channel.CreateLicenseAsync(Services);
        }
        
        public NominasSAT.wsLicenseTest.ValidateResult ValidateSerialService(NominasSAT.wsLicenseTest.SerialBase serial, NominasSAT.wsLicenseTest.Service Service) {
            return base.Channel.ValidateSerialService(serial, Service);
        }
        
        public System.Threading.Tasks.Task<NominasSAT.wsLicenseTest.ValidateResult> ValidateSerialServiceAsync(NominasSAT.wsLicenseTest.SerialBase serial, NominasSAT.wsLicenseTest.Service Service) {
            return base.Channel.ValidateSerialServiceAsync(serial, Service);
        }
        
        public NominasSAT.wsLicenseTest.ValidateResult ValidateService(string LicenseID, NominasSAT.wsLicenseTest.Service service) {
            return base.Channel.ValidateService(LicenseID, service);
        }
        
        public System.Threading.Tasks.Task<NominasSAT.wsLicenseTest.ValidateResult> ValidateServiceAsync(string LicenseID, NominasSAT.wsLicenseTest.Service service) {
            return base.Channel.ValidateServiceAsync(LicenseID, service);
        }
        
        public NominasSAT.wsLicenseTest.LicensingResult ActivateService(string LicenseID, NominasSAT.wsLicenseTest.Service Service) {
            return base.Channel.ActivateService(LicenseID, Service);
        }
        
        public System.Threading.Tasks.Task<NominasSAT.wsLicenseTest.LicensingResult> ActivateServiceAsync(string LicenseID, NominasSAT.wsLicenseTest.Service Service) {
            return base.Channel.ActivateServiceAsync(LicenseID, Service);
        }
        
        public NominasSAT.wsLicenseTest.LicensingResult UpdateLicense(string LicenseID, System.Collections.Generic.List<NominasSAT.wsLicenseTest.Service> Services) {
            return base.Channel.UpdateLicense(LicenseID, Services);
        }
        
        public System.Threading.Tasks.Task<NominasSAT.wsLicenseTest.LicensingResult> UpdateLicenseAsync(string LicenseID, System.Collections.Generic.List<NominasSAT.wsLicenseTest.Service> Services) {
            return base.Channel.UpdateLicenseAsync(LicenseID, Services);
        }
        
        public NominasSAT.wsLicenseTest.QueryLicenseResult GetLicenseInfo(string LicenseID, int ServiceID) {
            return base.Channel.GetLicenseInfo(LicenseID, ServiceID);
        }
        
        public System.Threading.Tasks.Task<NominasSAT.wsLicenseTest.QueryLicenseResult> GetLicenseInfoAsync(string LicenseID, int ServiceID) {
            return base.Channel.GetLicenseInfoAsync(LicenseID, ServiceID);
        }
        
        public NominasSAT.wsLicenseTest.LicensingResult Commit(string LicenseID, string ValidationCode, string Reference) {
            return base.Channel.Commit(LicenseID, ValidationCode, Reference);
        }
        
        public System.Threading.Tasks.Task<NominasSAT.wsLicenseTest.LicensingResult> CommitAsync(string LicenseID, string ValidationCode, string Reference) {
            return base.Channel.CommitAsync(LicenseID, ValidationCode, Reference);
        }
        
        public NominasSAT.wsLicenseTest.QueryLicenseResult GetPendingServices(string LicenseID) {
            return base.Channel.GetPendingServices(LicenseID);
        }
        
        public System.Threading.Tasks.Task<NominasSAT.wsLicenseTest.QueryLicenseResult> GetPendingServicesAsync(string LicenseID) {
            return base.Channel.GetPendingServicesAsync(LicenseID);
        }
        
        public NominasSAT.wsLicenseTest.ConsumeHistoryResult ConsumeHistory(string LicenseID, int ServiceID, int FeatureID, System.DateTime StartDate, System.DateTime EndDate) {
            return base.Channel.ConsumeHistory(LicenseID, ServiceID, FeatureID, StartDate, EndDate);
        }
        
        public System.Threading.Tasks.Task<NominasSAT.wsLicenseTest.ConsumeHistoryResult> ConsumeHistoryAsync(string LicenseID, int ServiceID, int FeatureID, System.DateTime StartDate, System.DateTime EndDate) {
            return base.Channel.ConsumeHistoryAsync(LicenseID, ServiceID, FeatureID, StartDate, EndDate);
        }
        
        public NominasSAT.wsLicenseTest.LicensingResult BlockLicense(string licenseID, int serviceID, int Blocked) {
            return base.Channel.BlockLicense(licenseID, serviceID, Blocked);
        }
        
        public System.Threading.Tasks.Task<NominasSAT.wsLicenseTest.LicensingResult> BlockLicenseAsync(string licenseID, int serviceID, int Blocked) {
            return base.Channel.BlockLicenseAsync(licenseID, serviceID, Blocked);
        }
    }
}
